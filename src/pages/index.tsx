import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import { useState } from 'react'
import { HiddenWords } from './components/hiddenWords'

const alfabeto = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split('').map(l => l);
const defaultImage = "/forca_img.jpg";

const MAX_ATTEMPTS = 5;

export default function Home() {
  const wordToDescover = "borracha";
  const [lettersUsed, setUsedState] = useState(['']);
  const [letterState, setLetterState] = useState(wordToDescover.split('').map(x => { return { word: x, isHide: true } }));
  const [gameState, setGameState] = useState({ attempts: 0, image: defaultImage, gameover: false, win: false });

  const handleChange = (letter: string) => {
    if (gameState.gameover) return;

    let lUsed = [...lettersUsed];
    if (!lUsed.includes(letter)) {
      lUsed.push(letter);
      setUsedState(lUsed);
      const wasFoundLetter = verifyDiscover(letter);
      calcGamePoints(wasFoundLetter);
    }
  };

  const verifyDiscover = (letter: string) => {
    let ws = [...letterState];
    let found = false;
    for (const w of ws) {
      if (w.word.toLocaleLowerCase() == letter.toLocaleLowerCase()) {
        w.isHide = false;
        found = true;
      }
    }
    setLetterState(ws);
    return found;
  }

  const calcGamePoints = (hit: boolean) => {
    let g = { ...gameState };
    if (hit) {
      if (letterState.every(l => l.isHide == false)) {
        g.gameover = true;
      }
    } else {
      g.attempts++;
      g.image = getImage(g.attempts);
      if (g.attempts > MAX_ATTEMPTS) {
        g.gameover = true;
      }
    }
    setGameState(g);
  }
  const getImage = (attemps: number) => {
    switch (attemps) {
      case 0:
        return defaultImage;
      case 1:
        return "/game_stages/forca1_img.jpg";
      case 2:
        return "/game_stages/forca2_img.jpg";
      case 3:
        return "/game_stages/forca3_img.jpg";
      case 4:
        return "/game_stages/forca4_img.jpg";
      case 5:
        return "/game_stages/forca5_img.jpg";
      case 6:
      default:
        return "/game_stages/forca6_img.jpg";
    }
  }

  const handleReset = () => {
    setUsedState(['']);
    setLetterState(wordToDescover.split('').map(x => { return { word: x, isHide: true } }));
    setGameState({ attempts: 0, image: defaultImage, gameover: false, win: false });
  }

  return (
    <>
      <Head>
        <title>Jogo da Forca</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div>
          <h1>
            Jogo Da Forca
          </h1>
        </div>
        <h3>Dica: Tem na escola</h3>
        <div className={styles.center}>
          <Image
            className={styles.logo}
            src={gameState.image}
            alt="forca img"
            width={280}
            height={280}
            priority
          />
          <div>
            {gameState.gameover ?
               gameState.win? (<span>Parabens vc venceu</span>) : (<span>Perdeu. Game Over</span>)
              :
              wordToDescover.split('').map((letra, i) => (<HiddenWords key={i + '_palavra'} word={letra} isHide={letterState[i].isHide} />))
            }
          </div>
        </div>
        <div>
          <p>Palavras do alfabeto j√° utilizadas:</p>
          <p>
            {lettersUsed.map((l, i) => (<span key={i + '_letras'}>{l}&ensp;</span>))}
          </p>
          <p>Teclado</p>
          {
            alfabeto.slice(0, alfabeto.length / 2).map((l, i) => (<button style={{ marginLeft: '5px' }} key={i + '_alfabetoA'} onClick={() => handleChange(l)}>{l}</button>))
          }
          <p>
            {
              alfabeto.slice(alfabeto.length / 2).map((l, i) => (<button style={{ marginLeft: '5px' }} key={i + '_alfabetoB'} onClick={() => handleChange(l)}>{l}</button>))
            }
          </p>
          <p><button onClick={handleReset}>Reset</button></p>
        </div>
      </main>
    </>
  )
}
